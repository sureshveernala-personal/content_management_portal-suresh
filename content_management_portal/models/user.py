from django.utils.translation import gettext_lazy as _
from datetime import date
from django.db import models
from django.contrib.auth.models import AbstractUser


class User(AbstractUser):
    pass

from django.contrib import admin

class Person(models.Model):
    name = models.CharField(max_length=50)
    birthday = models.DateField()
    is_user = models.BooleanField(default=True)
    def upper_case_name(self):
        return ("%s %s" % (self.birthday, self.name)).upper()
    upper_case_name.short_description = 'name'
    # upper_case_name.admin_order_field = 'birthday'
    # upper_name = property(upper_case_name)
# def upper_case_name(obj):
#     return ("%s %s" % (obj.birthday, obj.name)).upper()
# upper_case_name.short_description = '*name*'

class DecadeBornListFilter(admin.SimpleListFilter):
    title = _('decade born')

    parameter_name = 'decade'

    def lookups(self, request, model_admin):
        """
        Only show the lookups if there actually is
        anyone born in the corresponding decades.
        """
        qs = model_admin.get_queryset(request)
        if qs.filter(birthday__gte=date(1980, 1, 1),
                      birthday__lte=date(1989, 12, 31)).exists():
            yield ('80s', _('in the eighties'))
        if qs.filter(birthday__gte=date(1990, 1, 1),
                      birthday__lte=date(1999, 12, 31)).exists():
            yield ('90s', _('in the nineties'))

    def queryset(self, request, queryset):
        if self.value() == '80s':
            return queryset.filter(birthday__gte=date(1980, 1, 1),
                                    birthday__lte=date(1989, 12, 31))
        if self.value() == '90s':
            return queryset.filter(birthday__gte=date(1990, 1, 1),
                                    birthday__lte=date(1999, 12, 31))

class PersonAdmin(admin.ModelAdmin):
    list_filter = ('is_user', admin.BooleanFieldListFilter,)













'''
# Generated by Django 3.0.5 on 2020-07-07 09:13

from django.db import migrations, models

def load_data(apps, schema_editor):
    OldUser = apps.get_model("content_management_portal", "User")

    users = list(OldUser.objects.all())
    for user in users:
        user.name = user.firstname + user.lastname
        user.save()


class Migration(migrations.Migration):

    dependencies = [
        ('content_management_portal', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='user',
            name='name',
            field=models.CharField(default='kk', max_length=100),
            preserve_default=False,
        ),
        migrations.RunPython(load_data),
        
        migrations.RemoveField(
            model_name='user',
            name='firstname',
        ),
        migrations.RemoveField(
            model_name='user',
            name='lastname',
        ),
    ]


'''
